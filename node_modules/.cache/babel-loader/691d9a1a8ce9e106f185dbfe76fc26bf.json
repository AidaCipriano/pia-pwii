{"ast":null,"code":"var _jsxFileName = \"A:\\\\Users\\\\cesar\\\\Downloads\\\\POI_Tims\\\\POI-PROYECTOFINAL\\\\POI-PROYECTOFINAL\\\\src\\\\Components\\\\MessagesT.jsx\",\n    _s = $RefreshSig$();\n\nimport { doc, onSnapshot } from \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ChatConext } from \"../Context/ChatContext\";\nimport { db } from \"../firebase\";\nimport Message from \"./MessageT\";\nimport MessageGroup from \"./MessageTG\";\nimport \"../stilos.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Messages = () => {\n  _s();\n\n  useEffect(() => {\n    const unSub = onSnapshot(doc(db, \"chats\", data.chatId), doc => {\n      doc.exists() && setMessages(doc.data().messages);\n    });\n    return () => {\n      unSub();\n    };\n  }, [data.chatId]);\n  console.log(messages); //Manejar estado de encriptacion\n\n  const [encriptar, setEncriptar] = useState(false);\n\n  const toggleEncrypt = () => {\n    setEncriptar(!encriptar);\n    console.log(encriptar);\n  }; //Funciones para encriptar los mensajes\n\n\n  const cifrar = texto => {\n    console.log(\"AQUIIII\");\n\n    if (encriptar) {\n      var textoCifrado = CryptoJS.AES.encrypt(texto, \"poi\").toString();\n      console.log(\"se encripto\");\n      return textoCifrado;\n    } else {\n      console.log(\"No se encripto\");\n      return texto;\n    }\n  };\n\n  const {\n    data\n  } = useContext(ChatConext);\n  const [err, setErr] = useState(false); //const [cifrado, setCifrado] = useState(false);\n\n  const [idGroup, setIdGroup] = useState(\"null\");\n  const [messages, setMessages] = useState([]);\n  const [messagesGroup, setMessagesGroup] = useState([]);\n  const [chatIsGroup, setIsGroup] = useState(false);\n  const {\n    currentUser\n  } = useContext(AuthConext); //DIVISION PARA EL ENVIO DE MENSAJES\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n\n  const handleSendMessageLocation = async () => {\n    navigator.geolocation.getCurrentPosition(showPosition, showError);\n\n    function getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(showPosition);\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    }\n\n    getLocation();\n\n    function showPosition(position) {\n      //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n      //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n      var str = \"https://www.google.com/maps/place/\" + position.coords.longitude + \",\" + -position.coords.latitude;\n      document.getElementById(\"mensaje\").value = str;\n    }\n\n    function showError(error) {\n      console.log('getCurrentPosition returned error', error);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (chatIsGroup) {\n      console.log(\"es grupo\");\n\n      if (img) {\n        const storageRef = ref(storage, uuid());\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        uploadTask.on(error => {//TODO:Handle Error\n        }, () => {\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await updateDoc(doc(db, \"chats\", idGroup), {\n              messages: arrayUnion({\n                id: uuid(),\n                text: cifrar(text),\n                senderId: currentUser.uid,\n                date: Timestamp.now(),\n                img: downloadURL,\n                displayName: currentUser.displayName,\n                photoURL: currentUser.photoURL\n              })\n            });\n          });\n        });\n      } else {\n        await updateDoc(doc(db, \"chats\", idGroup), {\n          messages: arrayUnion({\n            id: uuid(),\n            text: cifrar(text),\n            senderId: currentUser.uid,\n            date: Timestamp.now(),\n            displayName: currentUser.displayName,\n            photoURL: currentUser.photoURL\n          })\n        });\n      }\n    } else {\n      if (img) {\n        const storageRef = ref(storage, uuid());\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        uploadTask.on(error => {//TODO:Handle Error\n        }, () => {\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await updateDoc(doc(db, \"chats\", data.chatId), {\n              messages: arrayUnion({\n                id: uuid(),\n                text: cifrar(text),\n                senderId: currentUser.uid,\n                date: Timestamp.now(),\n                img: downloadURL\n              })\n            });\n          });\n        });\n      } else {\n        await updateDoc(doc(db, \"chats\", data.chatId), {\n          messages: arrayUnion({\n            id: uuid(),\n            text: cifrar(text),\n            senderId: currentUser.uid,\n            date: Timestamp.now()\n          })\n        });\n      }\n\n      await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n        [data.chatId + \".lastMessage\"]: {\n          text\n        },\n        [data.chatId + \".date\"]: serverTimestamp()\n      });\n      await updateDoc(doc(db, \"userChats\", data.user.uid), {\n        [data.chatId + \".lastMessage\"]: {\n          text\n        },\n        [data.chatId + \".date\"]: serverTimestamp()\n      });\n    }\n\n    setIsGroup(false);\n    setIdGroup(\"null\");\n    setMessagesGroup([]);\n    console.log(\"ya lo puse falso\");\n    setText(\"\");\n    setImg(null);\n  }; // DIVISION PARA TRAER MSG DE UN GRUPO\n\n\n  const handlerGroup = async g => {\n    try {\n      console.log(\"chats/\" + g);\n      const docRef = doc(db, \"chats\", g);\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n        setIsGroup(true);\n        setIdGroup(g);\n      } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n        setIsGroup(false);\n        setIdGroup(\"null\");\n        setMessagesGroup([]);\n      }\n    } catch (err) {}\n  };\n\n  const handlerDefaultUser = () => {\n    console.log(\"yo\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messagesT\",\n    children: [messages.map(m => /*#__PURE__*/_jsxDEV(Message, {\n      message: m\n    }, m.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)), messagesGroup.map(m => /*#__PURE__*/_jsxDEV(MessageGroup, {\n      message: m\n    }, m.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"aOMH+CfY7mlzj68a3Od9Akrc9JQ=\");\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["doc","onSnapshot","React","useContext","useEffect","useState","ChatConext","db","Message","MessageGroup","Messages","unSub","data","chatId","exists","setMessages","messages","console","log","encriptar","setEncriptar","toggleEncrypt","cifrar","texto","textoCifrado","CryptoJS","AES","encrypt","toString","err","setErr","idGroup","setIdGroup","messagesGroup","setMessagesGroup","chatIsGroup","setIsGroup","currentUser","AuthConext","text","setText","img","setImg","handleSendMessageLocation","navigator","geolocation","getCurrentPosition","showPosition","showError","getLocation","alert","position","str","coords","longitude","latitude","document","getElementById","value","error","handleSendMessage","storageRef","ref","storage","uuid","uploadTask","uploadBytesResumable","on","getDownloadURL","snapshot","then","downloadURL","updateDoc","arrayUnion","id","senderId","uid","date","Timestamp","now","displayName","photoURL","serverTimestamp","user","handlerGroup","g","docRef","docSnap","getDoc","handlerDefaultUser","map","m"],"sources":["A:/Users/cesar/Downloads/POI_Tims/POI-PROYECTOFINAL/POI-PROYECTOFINAL/src/Components/MessagesT.jsx"],"sourcesContent":["import { doc, onSnapshot } from \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ChatConext } from \"../Context/ChatContext\";\nimport { db } from \"../firebase\";\nimport Message from \"./MessageT\";\nimport MessageGroup from \"./MessageTG\";\nimport \"../stilos.scss\";\n\nconst Messages = () => {\n\n\n  useEffect(() => {\n    const unSub = onSnapshot(doc(db, \"chats\", data.chatId), (doc) => {\n      doc.exists() && setMessages(doc.data().messages);\n    });\n\n    return () => {\n      unSub();\n    };\n  }, [data.chatId]);\n\n  console.log(messages)\n\n   //Manejar estado de encriptacion\n   const [encriptar, setEncriptar] = useState(false);\n\n   const toggleEncrypt = () => {\n       setEncriptar(!encriptar)\n       console.log(encriptar)\n   }\n\n   //Funciones para encriptar los mensajes\n   const cifrar = (texto) => {\n       console.log(\"AQUIIII\")\n       if (encriptar) {\n           var textoCifrado = CryptoJS.AES.encrypt(texto, \"poi\").toString();\n           console.log(\"se encripto\")\n           return textoCifrado;\n       } else {\n           console.log(\"No se encripto\")\n           return texto;\n       }\n   }\n\n  \n\n  const { data } = useContext(ChatConext);\n  const [err, setErr] = useState(false);\n  //const [cifrado, setCifrado] = useState(false);\n\n  const [idGroup, setIdGroup] = useState(\"null\");\n  const [messages, setMessages] = useState([]);\n  const [messagesGroup, setMessagesGroup] = useState([]);\n\n  const [chatIsGroup, setIsGroup] = useState(false);\n\n  const { currentUser } = useContext(AuthConext);\n\n  \n\n\n\n  //DIVISION PARA EL ENVIO DE MENSAJES\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n\n  const handleSendMessageLocation = async () => {\n      navigator.geolocation.getCurrentPosition(showPosition, showError);\n      \n      function getLocation(){\n          if (navigator.geolocation){\n             navigator.geolocation.getCurrentPosition(showPosition);\n            }else{\n               alert(\"Geolocation is not supported by this browser.\");\n            }\n          }\n         getLocation()\n        function showPosition(position) {\n              //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n              //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n              var str=\"https://www.google.com/maps/place/\" + position.coords.longitude + \",\" +- position.coords.latitude\n\n\n              document.getElementById(\"mensaje\").value=str\n          }\n          function showError( error ) {\n              console.log( 'getCurrentPosition returned error', error);\n          }\n  }\n\n  const handleSendMessage = async () => {\n\n      if (chatIsGroup) {\n          console.log(\"es grupo\")\n          if (img) {\n              const storageRef = ref(storage, uuid());\n\n              const uploadTask = uploadBytesResumable(storageRef, img);\n\n              uploadTask.on(\n                  (error) => {\n                      //TODO:Handle Error\n                  },\n                  () => {\n                      getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n                          await updateDoc(doc(db, \"chats\", idGroup), {\n                              messages: arrayUnion({\n                                  id: uuid(),\n                                  text: cifrar(text),\n                                  senderId: currentUser.uid,\n                                  date: Timestamp.now(),\n                                  img: downloadURL,\n                                  displayName: currentUser.displayName,\n                                  photoURL: currentUser.photoURL,\n                              }),\n                          });\n                      });\n                  }\n              );\n\n          } else {\n              await updateDoc(doc(db, \"chats\", idGroup), {\n                  messages: arrayUnion({\n                      id: uuid(),\n                      text: cifrar(text),\n                      senderId: currentUser.uid,\n                      date: Timestamp.now(),\n                      displayName: currentUser.displayName,\n                      photoURL: currentUser.photoURL,\n                  })\n              })\n          }\n      } else {\n          if (img) {\n              const storageRef = ref(storage, uuid());\n\n              const uploadTask = uploadBytesResumable(storageRef, img);\n\n              uploadTask.on(\n                  (error) => {\n                      //TODO:Handle Error\n                  },\n                  () => {\n                      getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n                          await updateDoc(doc(db, \"chats\", data.chatId), {\n                              messages: arrayUnion({\n                                  id: uuid(),\n                                  text: cifrar(text),\n                                  senderId: currentUser.uid,\n                                  date: Timestamp.now(),\n                                  img: downloadURL,\n                              }),\n                          });\n                      });\n                  }\n              );\n\n          } else {\n              await updateDoc(doc(db, \"chats\", data.chatId), {\n                  messages: arrayUnion({\n                      id: uuid(),\n                      text: cifrar(text),\n                      senderId: currentUser.uid,\n                      date: Timestamp.now(),\n                  })\n              })\n          }\n\n          await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n              [data.chatId + \".lastMessage\"]: {\n                  text,\n              },\n              [data.chatId + \".date\"]: serverTimestamp(),\n          });\n\n          await updateDoc(doc(db, \"userChats\", data.user.uid), {\n              [data.chatId + \".lastMessage\"]: {\n                  text,\n              },\n              [data.chatId + \".date\"]: serverTimestamp(),\n          });\n      }\n\n\n      setIsGroup(false);\n      setIdGroup(\"null\")\n      setMessagesGroup([])\n      console.log(\"ya lo puse falso\")\n      setText(\"\");\n      setImg(null);\n  }\n\n\n  // DIVISION PARA TRAER MSG DE UN GRUPO\n  const handlerGroup = async (g) => {\n\n      try {\n          console.log(\"chats/\" + g)\n          const docRef = doc(db, \"chats\", g);\n          const docSnap = await getDoc(docRef);\n\n          if (docSnap.exists()) {\n              console.log(\"Document data:\", docSnap.data());\n              setIsGroup(true);\n              setIdGroup(g);\n          } else {\n              // doc.data() will be undefined in this case\n              console.log(\"No such document!\");\n              setIsGroup(false);\n              setIdGroup(\"null\");\n              setMessagesGroup([])\n          }\n\n      } catch (err) {\n\n      }\n  }\n\n  const handlerDefaultUser = () => {\n\n      console.log(\"yo\")\n\n  }\n\n  return (\n    <div className=\"messagesT\">\n      {messages.map((m) => (\n        <Message message={m} key={m.id} />\n      ))}\n      {messagesGroup.map((m) => (\n          <MessageGroup message={m} key={m.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default Messages;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}