{"ast":null,"code":"var _jsxFileName = \"A:\\\\Users\\\\cesar\\\\Downloads\\\\POI_Tims\\\\POI-PROYECTOFINAL\\\\POI-PROYECTOFINAL\\\\src\\\\Components\\\\MessagesT.jsx\",\n    _s = $RefreshSig$();\n\nimport { doc, onSnapshot } from \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ChatConext } from \"../Context/ChatContext\";\nimport { db } from \"../firebase\";\nimport Message from \"./MessageT\"; //import MessageGroup from \"./MessageTG\";\n\nimport MessageGroup from \"./MessageGroup\";\nimport \"../stilos.scss\";\nimport \"./MessagesT.css\";\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport Stack from 'react-bootstrap/Stack';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form'; //Bootstrap\n\nimport { v4 as uuid } from \"uuid\";\nimport { AuthConext } from '../Context/AuthContext';\nimport CryptoJS from 'crypto-js';\nimport { collection, query, where, getDocs, serverTimestamp, updateDoc, Timestamp } from \"firebase/firestore\";\nimport { arrayUnion, arrayRemove, getDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nimport { storage } from '../firebase';\nimport { useRef } from 'react';\nimport Cam from \"../img/cam.png\";\nimport Attach from \"../img/attach.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Messages = () => {\n  _s();\n\n  var _data$user3, _data$user4;\n\n  //const { data } = useContext(ChatConext);\n  //const [err, setErr] = useState(false);\n  ////const [cifrado, setCifrado] = useState(false);\n  //\n  //const [idGroup, setIdGroup] = useState(\"null\");\n  //const [messages, setMessages] = useState([]);\n  //const [messagesGroup, setMessagesGroup] = useState([]);\n  //\n  //const [chatIsGroup, setIsGroup] = useState(false);\n  //\n  //const { currentUser } = useContext(AuthConext);\n  //\n  //\n  //\n  //const descifrar = (texto) => {\n  //  var bytes = CryptoJS.AES.decrypt(texto, \"poi\");\n  //  var textoDescifrado = bytes.toString(CryptoJS.enc.Utf8);\n  //\n  //  if (textoDescifrado) {\n  //      return textoDescifrado;\n  //  } else {\n  //      return texto;\n  //  }\n  //}\n  //\n  //\n  ////const ref = useRef();\n  //\n  //\n  //\n  ////Manejar estado de encriptacion\n  //const [encriptar, setEncriptar] = useState(false);\n  //\n  //const toggleEncrypt = () => {\n  //    setEncriptar(!encriptar)\n  //    console.log(encriptar)\n  //}\n  //\n  ////Funciones para encriptar los mensajes\n  //const cifrar = (texto) => {\n  //    console.log(\"AQUIIII\")\n  //    if (encriptar) {\n  //        var textoCifrado = CryptoJS.AES.encrypt(texto, \"poi\").toString();\n  //        console.log(\"se encripto\")\n  //        return textoCifrado;\n  //    } else {\n  //        console.log(\"No se encripto\")\n  //        return texto;\n  //    }\n  //}\n  //\n  //\n  //useEffect(() => {\n  //  const unSub = onSnapshot(doc(db, \"chats\", data.chatId), (doc) => {\n  //    doc.exists() && setMessages(doc.data().messages);\n  //  });\n  //\n  //  return () => {\n  //    unSub();\n  //  };\n  //}, [data.chatId]);\n  //\n  //useEffect(() => {\n  //    const unSubGroup = onSnapshot(doc(db, \"chats\", idGroup), (doc) => {\n  //        doc.exists() && setMessagesGroup(doc.data().messages)\n  //        console.log(idGroup)\n  //    })\n  //\n  //    return () => {\n  //        unSubGroup()\n  //    }\n  //}, [idGroup]);\n  //\n  //\n  ////DIVISION PARA EL ENVIO DE MENSAJES\n  //const [text, setText] = useState(\"\");\n  //const [img, setImg] = useState(null);\n  //\n  //const handleSendMessageLocation = async () => {\n  //  navigator.geolocation.getCurrentPosition(showPosition, showError);\n  //  \n  //  function getLocation(){\n  //    if (navigator.geolocation){\n  //        navigator.geolocation.getCurrentPosition(showPosition);\n  //      }else{\n  //          alert(\"Geolocation is not supported by this browser.\");\n  //      }\n  //    }\n  //    getLocation()\n  //    function showPosition(position) {\n  //      //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n  //      //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n  //      var str=\"https://www.google.com/maps/place/\" + position.coords.longitude + \",\" +- position.coords.latitude\n  //\n  //\n  //      document.getElementById(\"mensaje\").value=str\n  //    }\n  //    function showError( error ) {\n  //        console.log( 'getCurrentPosition returned error', error);\n  //    }\n  //}\n  //\n  //const handleSendMessage = async () => {\n  //\n  //    if (chatIsGroup) {\n  //        console.log(\"es grupo\")\n  //        if (img) {\n  //            const storageRef = ref(storage, uuid());\n  //\n  //            const uploadTask = uploadBytesResumable(storageRef, img);\n  //\n  //            uploadTask.on(\n  //                (error) => {\n  //                    //TODO:Handle Error\n  //                },\n  //                () => {\n  //                    getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n  //                        await updateDoc(doc(db, \"chats\", idGroup), {\n  //                            messages: arrayUnion({\n  //                                id: uuid(),\n  //                                text: cifrar(text),\n  //                                senderId: currentUser.uid,\n  //                                date: Timestamp.now(),\n  //                                img: downloadURL,\n  //                                displayName: currentUser.displayName,\n  //                                photoURL: currentUser.photoURL,\n  //                            }),\n  //                        });\n  //                    });\n  //                }\n  //            );\n  //\n  //        } else {\n  //            await updateDoc(doc(db, \"chats\", idGroup), {\n  //                messages: arrayUnion({\n  //                    id: uuid(),\n  //                    text: cifrar(text),\n  //                    senderId: currentUser.uid,\n  //                    date: Timestamp.now(),\n  //                    displayName: currentUser.displayName,\n  //                    photoURL: currentUser.photoURL,\n  //                })\n  //            })\n  //        }\n  //    } else {\n  //        if (img) {\n  //            const storageRef = ref(storage, uuid());\n  //\n  //            const uploadTask = uploadBytesResumable(storageRef, img);\n  //\n  //            uploadTask.on(\n  //                (error) => {\n  //                    //TODO:Handle Error\n  //                },\n  //                () => {\n  //                    getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n  //                        await updateDoc(doc(db, \"chats\", data.chatId), {\n  //                            messages: arrayUnion({\n  //                                id: uuid(),\n  //                                text: cifrar(text),\n  //                                senderId: currentUser.uid,\n  //                                date: Timestamp.now(),\n  //                                img: downloadURL,\n  //                            }),\n  //                        });\n  //                    });\n  //                }\n  //            );\n  //\n  //        } else {\n  //            await updateDoc(doc(db, \"chats\", data.chatId), {\n  //                messages: arrayUnion({\n  //                    id: uuid(),\n  //                    text: cifrar(text),\n  //                    senderId: currentUser.uid,\n  //                    date: Timestamp.now(),\n  //                })\n  //            })\n  //        }\n  //\n  //        await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n  //            [data.chatId + \".lastMessage\"]: {\n  //                text,\n  //            },\n  //            [data.chatId + \".date\"]: serverTimestamp(),\n  //        });\n  //\n  //        await updateDoc(doc(db, \"userChats\", data.user.uid), {\n  //            [data.chatId + \".lastMessage\"]: {\n  //                text,\n  //            },\n  //            [data.chatId + \".date\"]: serverTimestamp(),\n  //        });\n  //    }\n  //\n  //\n  //    setIsGroup(false);\n  //    setIdGroup(\"null\")\n  //    setMessagesGroup([])\n  //    console.log(\"ya lo puse falso\")\n  //    setText(\"\");\n  //    setImg(null);\n  //}\n  //\n  //\n  //// DIVISION PARA TRAER MSG DE UN GRUPO\n  //const handlerGroup = async (g) => {\n  //\n  //    try {\n  //        console.log(\"chats/\" + g)\n  //        const docRef = doc(db, \"chats\", g);\n  //        const docSnap = await getDoc(docRef);\n  //\n  //        if (docSnap.exists()) {\n  //            console.log(\"Document data:\", docSnap.data());\n  //            setIsGroup(true);\n  //            setIdGroup(g);\n  //        } else {\n  //            // doc.data() will be undefined in this case\n  //            console.log(\"No such document!\");\n  //            setIsGroup(false);\n  //            setIdGroup(\"null\");\n  //            setMessagesGroup([])\n  //        }\n  //\n  //    } catch (err) {\n  //\n  //    }\n  //}\n  //\n  //const handlerDefaultUser = () => {\n  //\n  //    console.log(\"yo\")\n  //\n  //}\n  //Manejar estado de encriptacion\n  const [encriptar, setEncriptar] = useState(false);\n\n  const toggleEncrypt = () => {\n    setEncriptar(!encriptar);\n    console.log(encriptar);\n  }; //Funciones para encriptar los mensajes\n\n\n  const cifrar = texto => {\n    console.log(\"AQUIIII\");\n\n    if (encriptar) {\n      var textoCifrado = CryptoJS.AES.encrypt(texto, \"poi\").toString();\n      console.log(\"se encripto\");\n      return textoCifrado;\n    } else {\n      console.log(\"No se encripto\");\n      return texto;\n    }\n  };\n\n  const {\n    data\n  } = useContext(ChatConext);\n  const [err, setErr] = useState(false); //const [cifrado, setCifrado] = useState(false);\n\n  const [idGroup, setIdGroup] = useState(\"null\");\n  const [messages, setMessages] = useState([]);\n  const [messagesGroup, setMessagesGroup] = useState([]);\n  const [chatIsGroup, setIsGroup] = useState(false);\n  const {\n    currentUser\n  } = useContext(AuthConext);\n  useEffect(() => {\n    const unSub = onSnapshot(doc(db, \"chats\", data.chatId), doc => {\n      doc.exists() && setMessages(doc.data().messages);\n    });\n    return () => {\n      unSub();\n    };\n  }, [data.chatId]);\n  useEffect(() => {\n    var _data$user;\n\n    const unSubGroup = onSnapshot(doc(db, \"chats\", (_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.displayName), doc => {\n      var _data$user2;\n\n      doc.exists() && setMessagesGroup(doc.data().messages);\n      console.log((_data$user2 = data.user) === null || _data$user2 === void 0 ? void 0 : _data$user2.displayName);\n    });\n    return () => {\n      unSubGroup();\n    };\n  }, [(_data$user3 = data.user) === null || _data$user3 === void 0 ? void 0 : _data$user3.displayName]); //DIVISION PARA EL ENVIO DE MENSAJES\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n\n  const handleSendMessageLocation = async () => {\n    navigator.geolocation.getCurrentPosition(showPosition, showError);\n\n    function getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(showPosition);\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    }\n\n    getLocation();\n\n    function showPosition(position) {\n      //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n      //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n      var str = \"https://www.google.com/maps/place/\" + position.coords.longitude + \",\" + -position.coords.latitude;\n      document.getElementById(\"mensaje\").value = str;\n    }\n\n    function showError(error) {\n      console.log('getCurrentPosition returned error', error);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (chatIsGroup) {\n      console.log(\"es grupo\");\n\n      if (img) {\n        const storageRef = ref(storage, uuid());\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        uploadTask.on(error => {//TODO:Handle Error\n        }, () => {\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await updateDoc(doc(db, \"chats\", idGroup), {\n              messages: arrayUnion({\n                id: uuid(),\n                text: cifrar(text),\n                senderId: currentUser.uid,\n                date: Timestamp.now(),\n                img: downloadURL,\n                displayName: currentUser.displayName,\n                photoURL: currentUser.photoURL\n              })\n            });\n          });\n        });\n      } else {\n        await updateDoc(doc(db, \"chats\", idGroup), {\n          messages: arrayUnion({\n            id: uuid(),\n            text: cifrar(text),\n            senderId: currentUser.uid,\n            date: Timestamp.now(),\n            displayName: currentUser.displayName,\n            photoURL: currentUser.photoURL\n          })\n        });\n      }\n    } else {\n      if (img) {\n        const storageRef = ref(storage, uuid());\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        uploadTask.on(error => {//TODO:Handle Error\n        }, () => {\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await updateDoc(doc(db, \"chats\", data.chatId), {\n              messages: arrayUnion({\n                id: uuid(),\n                text: cifrar(text),\n                senderId: currentUser.uid,\n                date: Timestamp.now(),\n                img: downloadURL\n              })\n            });\n          });\n        });\n      } else {\n        await updateDoc(doc(db, \"chats\", data.chatId), {\n          messages: arrayUnion({\n            id: uuid(),\n            text: cifrar(text),\n            senderId: currentUser.uid,\n            date: Timestamp.now()\n          })\n        });\n      }\n\n      await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n        [data.chatId + \".lastMessage\"]: {\n          text\n        },\n        [data.chatId + \".date\"]: serverTimestamp()\n      });\n      await updateDoc(doc(db, \"userChats\", data.user.uid), {\n        [data.chatId + \".lastMessage\"]: {\n          text\n        },\n        [data.chatId + \".date\"]: serverTimestamp()\n      });\n    }\n\n    setIsGroup(false);\n    setIdGroup(\"null\");\n    setMessagesGroup([]);\n    console.log(\"ya lo puse falso\");\n    setText(\"\");\n    setImg(null);\n  }; // DIVISION PARA TRAER MSG DE UN GRUPO\n\n\n  const handlerGroup = async g => {\n    try {\n      console.log(\"chats/\" + g);\n      const docRef = doc(db, \"chats\", g);\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n        setIsGroup(true);\n        setIdGroup(g);\n      } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n        setIsGroup(false);\n        setIdGroup(\"null\");\n        setMessagesGroup([]);\n      }\n    } catch (err) {\n      console.log(\"no ps f\");\n    }\n  };\n\n  const handlerDefaultUser = () => {\n    console.log(\"yo\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n      onClick: handlerDefaultUser,\n      children: (_data$user4 = data.user) === null || _data$user4 === void 0 ? void 0 : _data$user4.displayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messagesT\",\n      children: [messages.map(m => /*#__PURE__*/_jsxDEV(Message, {\n        message: m\n      }, m.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }, this)), messagesGroup.map(m => /*#__PURE__*/_jsxDEV(MessageGroup, {\n        message: m\n      }, m.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputT\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        id: \"mensaje\",\n        className: \"me-auto\",\n        placeholder: \"Mensaje a enviar...\",\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sendT\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleSendMessageLocation,\n          children: \"Enviar ubicaci\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            onClick: toggleEncrypt,\n            type: \"switch\",\n            id: \"custom-switch\",\n            label: \"Cifrar mensaje\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vr\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"file\",\n          onChange: e => setImg(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"http://localhost:4000/08db96f7-b409-40ee-8317-307c925d302d\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: Cam\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 80\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 491,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"E5m4SujiHIlBByGi23HsDINbtU8=\");\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["doc","onSnapshot","React","useContext","useEffect","useState","ChatConext","db","Message","MessageGroup","ListGroup","Card","Stack","Button","Form","v4","uuid","AuthConext","CryptoJS","collection","query","where","getDocs","serverTimestamp","updateDoc","Timestamp","arrayUnion","arrayRemove","getDoc","getDownloadURL","ref","uploadBytesResumable","storage","useRef","Cam","Attach","Messages","encriptar","setEncriptar","toggleEncrypt","console","log","cifrar","texto","textoCifrado","AES","encrypt","toString","data","err","setErr","idGroup","setIdGroup","messages","setMessages","messagesGroup","setMessagesGroup","chatIsGroup","setIsGroup","currentUser","unSub","chatId","exists","unSubGroup","user","displayName","text","setText","img","setImg","handleSendMessageLocation","navigator","geolocation","getCurrentPosition","showPosition","showError","getLocation","alert","position","str","coords","longitude","latitude","document","getElementById","value","error","handleSendMessage","storageRef","uploadTask","on","snapshot","then","downloadURL","id","senderId","uid","date","now","photoURL","handlerGroup","g","docRef","docSnap","handlerDefaultUser","map","m","e","target","files"],"sources":["A:/Users/cesar/Downloads/POI_Tims/POI-PROYECTOFINAL/POI-PROYECTOFINAL/src/Components/MessagesT.jsx"],"sourcesContent":["import { doc, onSnapshot } from \"firebase/firestore\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ChatConext } from \"../Context/ChatContext\";\nimport { db } from \"../firebase\";\nimport Message from \"./MessageT\";\n//import MessageGroup from \"./MessageTG\";\nimport MessageGroup from \"./MessageGroup\";\nimport \"../stilos.scss\";\nimport \"./MessagesT.css\";\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport Stack from 'react-bootstrap/Stack';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\n//Bootstrap\nimport { v4 as uuid } from \"uuid\";\nimport { AuthConext } from '../Context/AuthContext';\nimport CryptoJS from 'crypto-js';\n\nimport { collection, query, where, getDocs, serverTimestamp, updateDoc, Timestamp } from \"firebase/firestore\";\nimport { arrayUnion, arrayRemove, getDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nimport {storage } from '../firebase';\nimport { useRef } from 'react';\nimport Cam from \"../img/cam.png\";\nimport Attach from \"../img/attach.png\";\n\n\nconst Messages = () => {\n\n  //const { data } = useContext(ChatConext);\n  //const [err, setErr] = useState(false);\n  ////const [cifrado, setCifrado] = useState(false);\n//\n  //const [idGroup, setIdGroup] = useState(\"null\");\n  //const [messages, setMessages] = useState([]);\n  //const [messagesGroup, setMessagesGroup] = useState([]);\n//\n  //const [chatIsGroup, setIsGroup] = useState(false);\n//\n  //const { currentUser } = useContext(AuthConext);\n//\n  //\n//\n  //const descifrar = (texto) => {\n  //  var bytes = CryptoJS.AES.decrypt(texto, \"poi\");\n  //  var textoDescifrado = bytes.toString(CryptoJS.enc.Utf8);\n//\n  //  if (textoDescifrado) {\n  //      return textoDescifrado;\n  //  } else {\n  //      return texto;\n  //  }\n  //}\n//\n//\n  ////const ref = useRef();\n//\n //\n//\n  ////Manejar estado de encriptacion\n  //const [encriptar, setEncriptar] = useState(false);\n//\n  //const toggleEncrypt = () => {\n  //    setEncriptar(!encriptar)\n  //    console.log(encriptar)\n  //}\n//\n  ////Funciones para encriptar los mensajes\n  //const cifrar = (texto) => {\n  //    console.log(\"AQUIIII\")\n  //    if (encriptar) {\n  //        var textoCifrado = CryptoJS.AES.encrypt(texto, \"poi\").toString();\n  //        console.log(\"se encripto\")\n  //        return textoCifrado;\n  //    } else {\n  //        console.log(\"No se encripto\")\n  //        return texto;\n  //    }\n  //}\n//\n//\n  //useEffect(() => {\n  //  const unSub = onSnapshot(doc(db, \"chats\", data.chatId), (doc) => {\n  //    doc.exists() && setMessages(doc.data().messages);\n  //  });\n//\n  //  return () => {\n  //    unSub();\n  //  };\n  //}, [data.chatId]);\n//\n  //useEffect(() => {\n  //    const unSubGroup = onSnapshot(doc(db, \"chats\", idGroup), (doc) => {\n  //        doc.exists() && setMessagesGroup(doc.data().messages)\n  //        console.log(idGroup)\n  //    })\n//\n  //    return () => {\n  //        unSubGroup()\n  //    }\n  //}, [idGroup]);\n//\n//\n  ////DIVISION PARA EL ENVIO DE MENSAJES\n  //const [text, setText] = useState(\"\");\n  //const [img, setImg] = useState(null);\n//\n  //const handleSendMessageLocation = async () => {\n  //  navigator.geolocation.getCurrentPosition(showPosition, showError);\n  //  \n  //  function getLocation(){\n  //    if (navigator.geolocation){\n  //        navigator.geolocation.getCurrentPosition(showPosition);\n  //      }else{\n  //          alert(\"Geolocation is not supported by this browser.\");\n  //      }\n  //    }\n  //    getLocation()\n  //    function showPosition(position) {\n  //      //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n  //      //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n  //      var str=\"https://www.google.com/maps/place/\" + position.coords.longitude + \",\" +- position.coords.latitude\n//\n//\n  //      document.getElementById(\"mensaje\").value=str\n  //    }\n  //    function showError( error ) {\n  //        console.log( 'getCurrentPosition returned error', error);\n  //    }\n  //}\n//\n  //const handleSendMessage = async () => {\n//\n  //    if (chatIsGroup) {\n  //        console.log(\"es grupo\")\n  //        if (img) {\n  //            const storageRef = ref(storage, uuid());\n//\n  //            const uploadTask = uploadBytesResumable(storageRef, img);\n//\n  //            uploadTask.on(\n  //                (error) => {\n  //                    //TODO:Handle Error\n  //                },\n  //                () => {\n  //                    getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n  //                        await updateDoc(doc(db, \"chats\", idGroup), {\n  //                            messages: arrayUnion({\n  //                                id: uuid(),\n  //                                text: cifrar(text),\n  //                                senderId: currentUser.uid,\n  //                                date: Timestamp.now(),\n  //                                img: downloadURL,\n  //                                displayName: currentUser.displayName,\n  //                                photoURL: currentUser.photoURL,\n  //                            }),\n  //                        });\n  //                    });\n  //                }\n  //            );\n//\n  //        } else {\n  //            await updateDoc(doc(db, \"chats\", idGroup), {\n  //                messages: arrayUnion({\n  //                    id: uuid(),\n  //                    text: cifrar(text),\n  //                    senderId: currentUser.uid,\n  //                    date: Timestamp.now(),\n  //                    displayName: currentUser.displayName,\n  //                    photoURL: currentUser.photoURL,\n  //                })\n  //            })\n  //        }\n  //    } else {\n  //        if (img) {\n  //            const storageRef = ref(storage, uuid());\n//\n  //            const uploadTask = uploadBytesResumable(storageRef, img);\n//\n  //            uploadTask.on(\n  //                (error) => {\n  //                    //TODO:Handle Error\n  //                },\n  //                () => {\n  //                    getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n  //                        await updateDoc(doc(db, \"chats\", data.chatId), {\n  //                            messages: arrayUnion({\n  //                                id: uuid(),\n  //                                text: cifrar(text),\n  //                                senderId: currentUser.uid,\n  //                                date: Timestamp.now(),\n  //                                img: downloadURL,\n  //                            }),\n  //                        });\n  //                    });\n  //                }\n  //            );\n//\n  //        } else {\n  //            await updateDoc(doc(db, \"chats\", data.chatId), {\n  //                messages: arrayUnion({\n  //                    id: uuid(),\n  //                    text: cifrar(text),\n  //                    senderId: currentUser.uid,\n  //                    date: Timestamp.now(),\n  //                })\n  //            })\n  //        }\n//\n  //        await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n  //            [data.chatId + \".lastMessage\"]: {\n  //                text,\n  //            },\n  //            [data.chatId + \".date\"]: serverTimestamp(),\n  //        });\n//\n  //        await updateDoc(doc(db, \"userChats\", data.user.uid), {\n  //            [data.chatId + \".lastMessage\"]: {\n  //                text,\n  //            },\n  //            [data.chatId + \".date\"]: serverTimestamp(),\n  //        });\n  //    }\n//\n//\n  //    setIsGroup(false);\n  //    setIdGroup(\"null\")\n  //    setMessagesGroup([])\n  //    console.log(\"ya lo puse falso\")\n  //    setText(\"\");\n  //    setImg(null);\n  //}\n//\n//\n  //// DIVISION PARA TRAER MSG DE UN GRUPO\n  //const handlerGroup = async (g) => {\n//\n  //    try {\n  //        console.log(\"chats/\" + g)\n  //        const docRef = doc(db, \"chats\", g);\n  //        const docSnap = await getDoc(docRef);\n//\n  //        if (docSnap.exists()) {\n  //            console.log(\"Document data:\", docSnap.data());\n  //            setIsGroup(true);\n  //            setIdGroup(g);\n  //        } else {\n  //            // doc.data() will be undefined in this case\n  //            console.log(\"No such document!\");\n  //            setIsGroup(false);\n  //            setIdGroup(\"null\");\n  //            setMessagesGroup([])\n  //        }\n//\n  //    } catch (err) {\n//\n  //    }\n  //}\n//\n  //const handlerDefaultUser = () => {\n//\n  //    console.log(\"yo\")\n//\n  //}\n\n  //Manejar estado de encriptacion\n  const [encriptar, setEncriptar] = useState(false);\n\n  const toggleEncrypt = () => {\n      setEncriptar(!encriptar)\n      console.log(encriptar)\n  }\n\n  //Funciones para encriptar los mensajes\n  const cifrar = (texto) => {\n      console.log(\"AQUIIII\")\n      if (encriptar) {\n          var textoCifrado = CryptoJS.AES.encrypt(texto, \"poi\").toString();\n          console.log(\"se encripto\")\n          return textoCifrado;\n      } else {\n          console.log(\"No se encripto\")\n          return texto;\n      }\n  }\n\n  \n\n  const { data } = useContext(ChatConext);\n  const [err, setErr] = useState(false);\n  //const [cifrado, setCifrado] = useState(false);\n\n  const [idGroup, setIdGroup] = useState(\"null\");\n  const [messages, setMessages] = useState([]);\n  const [messagesGroup, setMessagesGroup] = useState([]);\n\n  const [chatIsGroup, setIsGroup] = useState(false);\n\n  const { currentUser } = useContext(AuthConext);\n\n  useEffect(() => {\n      const unSub = onSnapshot(doc(db, \"chats\", data.chatId), (doc) => {\n          doc.exists() && setMessages(doc.data().messages)\n      })\n      return () => {\n\n          unSub()\n      }\n  }, [data.chatId]);\n\n  useEffect(() => {\n      const unSubGroup = onSnapshot(doc(db, \"chats\", data.user?.displayName), (doc) => {\n          doc.exists() && setMessagesGroup(doc.data().messages)\n          console.log(data.user?.displayName)\n      })\n      return () => {\n          unSubGroup()\n      }\n  }, [data.user?.displayName]);\n  \n\n\n\n  //DIVISION PARA EL ENVIO DE MENSAJES\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n\n  const handleSendMessageLocation = async () => {\n      navigator.geolocation.getCurrentPosition(showPosition, showError);\n      \n      function getLocation(){\n          if (navigator.geolocation){\n             navigator.geolocation.getCurrentPosition(showPosition);\n            }else{\n               alert(\"Geolocation is not supported by this browser.\");\n            }\n          }\n         getLocation()\n        function showPosition(position) {\n              //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n              //var str=\"Longitude: \"+ position.coords.longitude+\"Latitude:\"+ position.coords.latitude\n              var str=\"https://www.google.com/maps/place/\" + position.coords.longitude + \",\" +- position.coords.latitude\n\n\n              document.getElementById(\"mensaje\").value=str\n          }\n          function showError( error ) {\n              console.log( 'getCurrentPosition returned error', error);\n          }\n  }\n\n  const handleSendMessage = async () => {\n\n      if (chatIsGroup) {\n          console.log(\"es grupo\")\n          if (img) {\n              const storageRef = ref(storage, uuid());\n\n              const uploadTask = uploadBytesResumable(storageRef, img);\n\n              uploadTask.on(\n                  (error) => {\n                      //TODO:Handle Error\n                  },\n                  () => {\n                      getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n                          await updateDoc(doc(db, \"chats\", idGroup), {\n                              messages: arrayUnion({\n                                  id: uuid(),\n                                  text: cifrar(text),\n                                  senderId: currentUser.uid,\n                                  date: Timestamp.now(),\n                                  img: downloadURL,\n                                  displayName: currentUser.displayName,\n                                  photoURL: currentUser.photoURL,\n                              }),\n                          });\n                      });\n                  }\n              );\n\n          } else {\n              await updateDoc(doc(db, \"chats\", idGroup), {\n                  messages: arrayUnion({\n                      id: uuid(),\n                      text: cifrar(text),\n                      senderId: currentUser.uid,\n                      date: Timestamp.now(),\n                      displayName: currentUser.displayName,\n                      photoURL: currentUser.photoURL,\n                  })\n              })\n          }\n      } else {\n          if (img) {\n              const storageRef = ref(storage, uuid());\n\n              const uploadTask = uploadBytesResumable(storageRef, img);\n\n              uploadTask.on(\n                  (error) => {\n                      //TODO:Handle Error\n                  },\n                  () => {\n                      getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n                          await updateDoc(doc(db, \"chats\", data.chatId), {\n                              messages: arrayUnion({\n                                  id: uuid(),\n                                  text: cifrar(text),\n                                  senderId: currentUser.uid,\n                                  date: Timestamp.now(),\n                                  img: downloadURL,\n                              }),\n                          });\n                      });\n                  }\n              );\n\n          } else {\n              await updateDoc(doc(db, \"chats\", data.chatId), {\n                  messages: arrayUnion({\n                      id: uuid(),\n                      text: cifrar(text),\n                      senderId: currentUser.uid,\n                      date: Timestamp.now(),\n                  })\n              })\n          }\n\n          await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n              [data.chatId + \".lastMessage\"]: {\n                  text,\n              },\n              [data.chatId + \".date\"]: serverTimestamp(),\n          });\n\n          await updateDoc(doc(db, \"userChats\", data.user.uid), {\n              [data.chatId + \".lastMessage\"]: {\n                  text,\n              },\n              [data.chatId + \".date\"]: serverTimestamp(),\n          });\n      }\n\n\n      setIsGroup(false);\n      setIdGroup(\"null\")\n      setMessagesGroup([])\n      console.log(\"ya lo puse falso\")\n      setText(\"\");\n      setImg(null);\n  }\n\n\n  // DIVISION PARA TRAER MSG DE UN GRUPO\n  const handlerGroup = async (g) => {\n\n\n\n    try {\n      console.log(\"chats/\" + g)\n      const docRef = doc(db, \"chats\", g);\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n        setIsGroup(true);\n        setIdGroup(g);\n      } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n        setIsGroup(false);\n        setIdGroup(\"null\");\n        setMessagesGroup([])\n      }\n\n    } catch (err) {\n      console.log(\"no ps f\")\n    }\n  }\n\n  const handlerDefaultUser = () => {\n\n    console.log(\"yo\")\n\n  }\n\n  return (\n    <section>\n      {/* onChange={(g) => handlerGroup(data.user?.displayName, g)} */}\n      <Card.Title onClick={handlerDefaultUser}>{data.user?.displayName}</Card.Title>\n      <div className=\"messagesT\">\n      \n\n        {messages.map((m) => (\n          <Message message={m} key={m.id} />\n          \n        ))}\n        {messagesGroup.map((m) => (\n          <MessageGroup message={m} key={m.id} />\n        ))}\n      </div>\n   \n      <div className=\"inputT\">\n        <Form.Control id=\"mensaje\" className=\"me-auto\" placeholder=\"Mensaje a enviar...\" onChange={e => setText(e.target.value)} />\n        \n        <div className=\"sendT\">\n          {/* <img src={Attach} alt=\"\" /> \n          <input \n            type=\"file\"\n            style={{ display: \"none\" }}\n            id=\"file\"\n            onChange={(e) => setImg(e.target.files[0])}\n          />*/}\n          <Button variant=\"primary\" onClick={handleSendMessageLocation}>Enviar ubicación</Button>\n          {/* <label htmlFor=\"fileInputM\"> */}\n            {/* <img id=\"iconM\" src={Attach} /> */}\n          {/* </label> */}\n          {/* <input id=\"fileInputM\" type=\"file\" onChange={e => setImg(e.target.files[0])}></input> */}\n          <Form>\n            <Form.Check onClick={toggleEncrypt}\n                type=\"switch\"\n                id=\"custom-switch\"\n                label=\"Cifrar mensaje\"\n            />\n          </Form>\n          <div className=\"vr\" />\n          <Form.Control type=\"file\" onChange={e => setImg(e.target.files[0])} />\n          <a href=\"http://localhost:4000/08db96f7-b409-40ee-8317-307c925d302d\"><img src={Cam} /></a>\n          \n          <button onClick={handleSendMessage}>Send</button>\n        </div>\n      </div>\n  </section>\n\n  );\n};\n\nexport default Messages;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}