{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Downloads\\\\Aplicacion-de-comunicacion-llamadas-y-mensajes-master (1)\\\\Aplicacion-de-comunicacion-llamadas-y-mensajes-master\\\\src\\\\Components\\\\ChatWindow.jsx\",\n    _s = $RefreshSig$();\n\nimport Navigation from '../Components/NavigationLayout';\nimport Badge from 'react-bootstrap/Badge';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport Stack from 'react-bootstrap/Stack';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { Container } from 'react-bootstrap';\nimport { collection, query, where, getDocs, serverTimestamp, onSnapshot, doc, updateDoc, Timestamp } from \"firebase/firestore\";\nimport Search from '../Components/Search';\nimport { db, storage } from '../firebase';\nimport { arrayUnion, arrayRemove, getDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\"; //Bootstrap\n\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { useContext } from 'react';\nimport { ChatConext } from '../Context/ChatContext';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { v4 as uuid } from \"uuid\";\nimport { AuthConext } from '../Context/AuthContext';\nimport Mensaje from './Mensaje';\nimport MessageGroup from './MessageGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatWindow = () => {\n  _s();\n\n  var _data$user, _data$user2;\n\n  const {\n    data\n  } = useContext(ChatConext);\n  const [err, setErr] = useState(false);\n  const [cifrado, setCifrado] = useState(false);\n  const [idGroup, setIdGroup] = useState(\"null\");\n  const [messages, setMessages] = useState([]);\n  const [messagesGroup, setMessagesGroup] = useState([]);\n  const [chatIsGroup, setIsGroup] = useState(false);\n  const {\n    currentUser\n  } = useContext(AuthConext);\n  useEffect(() => {\n    const unSub = onSnapshot(doc(db, \"chats\", data.chatId), doc => {\n      doc.exists() && setMessages(doc.data().messages);\n    });\n    return () => {\n      unSub();\n    };\n  }, [data.chatId]);\n  useEffect(() => {\n    const unSubGroup = onSnapshot(doc(db, \"chats\", idGroup), doc => {\n      doc.exists() && setMessagesGroup(doc.data().messages);\n      console.log(idGroup);\n    });\n    return () => {\n      unSubGroup();\n    };\n  }, [idGroup]); //DIVISION PARA EL ENVIO DE MENSAJES\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n\n  const handleSendMessage = async () => {\n    if (chatIsGroup) {\n      console.log(\"es grupo\");\n\n      if (img) {\n        const storageRef = ref(storage, uuid());\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        uploadTask.on(error => {//TODO:Handle Error\n        }, () => {\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await updateDoc(doc(db, \"chats\", idGroup), {\n              messages: arrayUnion({\n                id: uuid(),\n                text,\n                senderId: currentUser.uid,\n                date: Timestamp.now(),\n                img: downloadURL,\n                displayName: currentUser.displayName,\n                photoURL: currentUser.photoURL\n              })\n            });\n          });\n        });\n      } else {\n        await updateDoc(doc(db, \"chats\", idGroup), {\n          messages: arrayUnion({\n            id: uuid(),\n            text,\n            senderId: currentUser.uid,\n            date: Timestamp.now(),\n            displayName: currentUser.displayName,\n            photoURL: currentUser.photoURL\n          })\n        });\n      }\n    } else {\n      if (img) {\n        const storageRef = ref(storage, uuid());\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        uploadTask.on(error => {//TODO:Handle Error\n        }, () => {\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await updateDoc(doc(db, \"chats\", data.chatId), {\n              messages: arrayUnion({\n                id: uuid(),\n                text,\n                senderId: currentUser.uid,\n                date: Timestamp.now(),\n                img: downloadURL\n              })\n            });\n          });\n        });\n      } else {\n        await updateDoc(doc(db, \"chats\", data.chatId), {\n          messages: arrayUnion({\n            id: uuid(),\n            text,\n            senderId: currentUser.uid,\n            date: Timestamp.now()\n          })\n        });\n      }\n\n      await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n        [data.chatId + \".lastMessage\"]: {\n          text\n        },\n        [data.chatId + \".date\"]: serverTimestamp()\n      });\n      await updateDoc(doc(db, \"userChats\", data.user.uid), {\n        [data.chatId + \".lastMessage\"]: {\n          text\n        },\n        [data.chatId + \".date\"]: serverTimestamp()\n      });\n    }\n\n    setIsGroup(false);\n    setIdGroup(\"null\");\n    setMessagesGroup([]);\n    console.log(\"ya lo puse falso\");\n    setText(\"\");\n    setImg(null);\n  }; // DIVISION PARA TRAER MSG DE UN GRUPO\n\n\n  const handlerGroup = async g => {\n    try {\n      console.log(\"chats/\" + g);\n      const docRef = doc(db, \"chats\", g);\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n        setIsGroup(true);\n        setIdGroup(g);\n      } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n        setIsGroup(false);\n        setIdGroup(\"null\");\n        setMessagesGroup([]);\n      }\n    } catch (err) {}\n  };\n\n  const handlerDefaultUser = () => {\n    console.log(\"yo\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-75 ms-5 h-100\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"chatContainer w-100 h-100\",\n      style: {},\n      children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \".bg-info\",\n        children: /*#__PURE__*/_jsxDEV(Card.Title, {\n          onClick: handlerDefaultUser,\n          onChange: handlerGroup((_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.displayName),\n          children: (_data$user2 = data.user) === null || _data$user2 === void 0 ? void 0 : _data$user2.displayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        className: \"list-group-flush overflow-auto\",\n        children: [messages.map(m => /*#__PURE__*/_jsxDEV(Mensaje, {\n          message: m\n        }, m.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this)), messagesGroup.map(m => /*#__PURE__*/_jsxDEV(MessageGroup, {\n          message: m\n        }, m.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"horizontal\",\n          gap: 3,\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            className: \"me-auto\",\n            placeholder: \"Escribe tu mensaje aqui...\",\n            onChange: e => setText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"switch\",\n              id: \"custom-switch\",\n              label: \"Cifrar mensaje\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"vr\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"file\",\n            onChange: e => setImg(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleSendMessage,\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleSendMessage,\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatWindow, \"HQgx0SLZtqa6W9ggxxvuUDzUu30=\");\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["Navigation","Badge","ListGroup","Card","Stack","Button","Form","Container","collection","query","where","getDocs","serverTimestamp","onSnapshot","doc","updateDoc","Timestamp","Search","db","storage","arrayUnion","arrayRemove","getDoc","getDownloadURL","ref","uploadBytesResumable","InputGroup","useContext","ChatConext","useState","useEffect","v4","uuid","AuthConext","Mensaje","MessageGroup","ChatWindow","data","err","setErr","cifrado","setCifrado","idGroup","setIdGroup","messages","setMessages","messagesGroup","setMessagesGroup","chatIsGroup","setIsGroup","currentUser","unSub","chatId","exists","unSubGroup","console","log","text","setText","img","setImg","handleSendMessage","storageRef","uploadTask","on","error","snapshot","then","downloadURL","id","senderId","uid","date","now","displayName","photoURL","user","handlerGroup","g","docRef","docSnap","handlerDefaultUser","map","m","e","target","value","files"],"sources":["C:/Users/andre/Downloads/Aplicacion-de-comunicacion-llamadas-y-mensajes-master (1)/Aplicacion-de-comunicacion-llamadas-y-mensajes-master/src/Components/ChatWindow.jsx"],"sourcesContent":["import Navigation from '../Components/NavigationLayout';\nimport Badge from 'react-bootstrap/Badge';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport Stack from 'react-bootstrap/Stack';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { Container } from 'react-bootstrap';\nimport { collection, query, where, getDocs, serverTimestamp, onSnapshot, doc, updateDoc, Timestamp } from \"firebase/firestore\";\nimport Search from '../Components/Search';\nimport { db, storage } from '../firebase';\nimport { arrayUnion, arrayRemove, getDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\n\n\n//Bootstrap\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { useContext } from 'react';\nimport { ChatConext } from '../Context/ChatContext';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { v4 as uuid } from \"uuid\";\nimport { AuthConext } from '../Context/AuthContext';\nimport Mensaje from './Mensaje';\nimport MessageGroup from './MessageGroup';\n\nconst ChatWindow = () => {\n\n    const { data } = useContext(ChatConext);\n    const [err, setErr] = useState(false);\n    const [cifrado, setCifrado] = useState(false);\n\n    const [idGroup, setIdGroup] = useState(\"null\");\n    const [messages, setMessages] = useState([]);\n    const [messagesGroup, setMessagesGroup] = useState([]);\n\n    const [chatIsGroup, setIsGroup] = useState(false);\n\n    const { currentUser } = useContext(AuthConext);\n\n    useEffect(() => {\n        const unSub = onSnapshot(doc(db, \"chats\", data.chatId), (doc) => {\n            doc.exists() && setMessages(doc.data().messages)\n        })\n\n\n\n\n\n        return () => {\n\n            unSub()\n        }\n\n\n\n    }, [data.chatId]);\n\n    useEffect(() => {\n\n        const unSubGroup = onSnapshot(doc(db, \"chats\", idGroup), (doc) => {\n            doc.exists() && setMessagesGroup(doc.data().messages)\n            console.log(idGroup)\n        })\n\n        return () => {\n            unSubGroup()\n        }\n\n\n\n    }, [idGroup]);\n    \n\n\n\n    //DIVISION PARA EL ENVIO DE MENSAJES\n    const [text, setText] = useState(\"\");\n    const [img, setImg] = useState(null);\n\n    const handleSendMessage = async () => {\n\n        if (chatIsGroup) {\n            console.log(\"es grupo\")\n            if (img) {\n                const storageRef = ref(storage, uuid());\n\n                const uploadTask = uploadBytesResumable(storageRef, img);\n\n                uploadTask.on(\n                    (error) => {\n                        //TODO:Handle Error\n                    },\n                    () => {\n                        getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n                            await updateDoc(doc(db, \"chats\", idGroup), {\n                                messages: arrayUnion({\n                                    id: uuid(),\n                                    text,\n                                    senderId: currentUser.uid,\n                                    date: Timestamp.now(),\n                                    img: downloadURL,\n                                    displayName: currentUser.displayName,\n                                    photoURL: currentUser.photoURL,\n                                }),\n                            });\n                        });\n                    }\n                );\n\n            } else {\n                await updateDoc(doc(db, \"chats\", idGroup), {\n                    messages: arrayUnion({\n                        id: uuid(),\n                        text,\n                        senderId: currentUser.uid,\n                        date: Timestamp.now(),\n                        displayName: currentUser.displayName,\n                        photoURL: currentUser.photoURL,\n                    })\n                })\n            }\n        } else {\n            if (img) {\n                const storageRef = ref(storage, uuid());\n\n                const uploadTask = uploadBytesResumable(storageRef, img);\n\n                uploadTask.on(\n                    (error) => {\n                        //TODO:Handle Error\n                    },\n                    () => {\n                        getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n                            await updateDoc(doc(db, \"chats\", data.chatId), {\n                                messages: arrayUnion({\n                                    id: uuid(),\n                                    text,\n                                    senderId: currentUser.uid,\n                                    date: Timestamp.now(),\n                                    img: downloadURL,\n                                }),\n                            });\n                        });\n                    }\n                );\n\n            } else {\n                await updateDoc(doc(db, \"chats\", data.chatId), {\n                    messages: arrayUnion({\n                        id: uuid(),\n                        text,\n                        senderId: currentUser.uid,\n                        date: Timestamp.now(),\n                    })\n                })\n            }\n\n            await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n                [data.chatId + \".lastMessage\"]: {\n                    text,\n                },\n                [data.chatId + \".date\"]: serverTimestamp(),\n            });\n\n            await updateDoc(doc(db, \"userChats\", data.user.uid), {\n                [data.chatId + \".lastMessage\"]: {\n                    text,\n                },\n                [data.chatId + \".date\"]: serverTimestamp(),\n            });\n        }\n\n\n        setIsGroup(false);\n        setIdGroup(\"null\")\n        setMessagesGroup([])\n        console.log(\"ya lo puse falso\")\n        setText(\"\");\n        setImg(null);\n    }\n\n\n    // DIVISION PARA TRAER MSG DE UN GRUPO\n    const handlerGroup = async (g) => {\n\n        try {\n            console.log(\"chats/\" + g)\n            const docRef = doc(db, \"chats\", g);\n            const docSnap = await getDoc(docRef);\n\n            if (docSnap.exists()) {\n                console.log(\"Document data:\", docSnap.data());\n                setIsGroup(true);\n                setIdGroup(g);\n            } else {\n                // doc.data() will be undefined in this case\n                console.log(\"No such document!\");\n                setIsGroup(false);\n                setIdGroup(\"null\");\n                setMessagesGroup([])\n            }\n\n        } catch (err) {\n\n        }\n    }\n\n    const handlerDefaultUser = () => {\n\n        console.log(\"yo\")\n\n    }\n\n\n\n    return (\n        <div className='w-75 ms-5 h-100' >\n            <Card className='chatContainer w-100 h-100' style={{}}>\n                <Card.Body className='.bg-info'>\n                    <Card.Title onClick={handlerDefaultUser} onChange={handlerGroup(data.user?.displayName)}>{data.user?.displayName}</Card.Title>\n                </Card.Body>\n                <ListGroup className=\"list-group-flush overflow-auto\">\n\n\n                    {messages.map((m) => (\n                        <Mensaje message={m} key={m.id} />\n                    ))}\n\n                    {messagesGroup.map((m) => (\n                        <MessageGroup message={m} key={m.id} />\n                    ))}\n\n\n\n                </ListGroup>\n                <Card.Body>\n                    <Stack direction=\"horizontal\" gap={3}>\n                        <Form.Control className=\"me-auto\" placeholder=\"Escribe tu mensaje aqui...\" onChange={e => setText(e.target.value)} />\n                        <Form>\n                        <Form.Check \n                            type=\"switch\"\n                            id=\"custom-switch\"\n                            label=\"Cifrar mensaje\"\n                        />\n                        </Form>\n                        <div className=\"vr\" />\n                        <Form.Control type=\"file\" onChange={e => setImg(e.target.files[0])} />\n                        <Button variant=\"secondary\" onClick={handleSendMessage}>Enviar</Button>\n                        <Button variant=\"secondary\" onClick={handleSendMessage}>Enviar</Button>\n                    </Stack>\n                </Card.Body>\n            </Card>\n        </div>\n\n    )\n\n}\n\nexport default ChatWindow"],"mappings":"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"},"metadata":{},"sourceType":"module"}